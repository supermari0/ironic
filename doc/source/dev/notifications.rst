.. _notifications:

=============
Notifications
=============

Ironic notifications are events intended for consumption by external services
like a billing or usage system, a monitoring data store, or other OpenStack
services.  Notifications are sent to these services over a message bus by
oslo.messaging's Notifier class [1]_. The consumer sees the notification as a
JSON object structured in the following way as defined by oslo.messaging::

    {
        "priority": <string, defined by the sender>,
        "event_type": <string, defined by the sender>,
        "timestamp": <string, the isotime of when the notification emitted>,
        "publisher_id": <string, defined by the sender>,
        "message_id": <uuid, generated by oslo>,
        "payload": <json serialized dict, defined by the sender>
    }

Versioned notifications in Ironic
---------------------------------
To make it easier for consumers of Ironic's notifications to use predictably,
Ironic defines each notification and its payload as oslo versioned objects
[2]_.

An increase in the minor version of the payload will indicate that only
new fields have been added since the last version, so the consumer can still
use the notification as it did previously. An increase in the major version of
the payload indicates that the consumer can no longer parse the notification as
it did previously, indicating that a field was removed or the type of the
payload field changed.

Ironic exposes a configuration option called "notification_priority" that
indicates the minimum priority for which notifications will be
emitted. The default is currently None, which indicates that no notifications
will be sent by Ironic. Notification priorities may be "debug", "info", "warn",
or "error", and each priority follows the OpenStack logging guidelines [3]_. If
it's desired that Ironic emit all notifications, the config option should be
set to "debug", for example. If only "warn" and "error" notifications are
needed, the config option should be set to "warn".

Ironic also has a set of base classes that assist in clearly defining the
notification itself, the payload, and the other fields not auto-generated by
oslo (priority, event_type and publisher_id). Below describes how to use these
base classes to add a new notification to Ironic.

Adding a new notification to Ironic
-----------------------------------
To add a new notification to Ironic, new versioned notification classes should
be created by subclassing the NotificationBase class to define the notification
itself and the NotificationPayloadBase class to define which fields the new
notification will contain inside its payload. You may also define a schema to
allow the payload to be automatically populated by the fields of an Ironic
object. Here's an example::

    # The Ironic object whose fields you want to use in your schema
    @base.IronicObjectRegistry.register
    class ExampleObject(base.IronicObject):
        # Version 1.0: Initial version
        VERSION = '1.0'
        fields = {
            'id': fields.IntegerField(),
            'uuid': fields.UUIDField(),
            'a_useful_field': fields.StringField(),
            'not_useful_field': fields.StringField()
        }

    # A class for your new notification
    @base.IronicObjectRegistry.register
    class ExampleNotification(notification.NotificationBase):
        # Version 1.0: Initial version
        VERSION = '1.0'
        fields = {
            'payload': fields.ObjectField('ExampleNotifPayload')
        }

    # A class for your notification's payload
    @base.IronicObjectRegistry.register
    class ExampleNotifPayload(notification.NotificationPayloadBase):
        # Schemas are optional. They just allow you to reuse other objects'
        # fields by passing in that object and calling populate_schema with
        # a kwarg set to the other object.
        SCHEMA = {
            'a_useful_field': ('example_obj', 'a_useful_field')
        }

        # Version 1.0: Initial version
        VERSION = '1.0'

        fields = {
            'a_useful_field': fields.StringField(),
            'an_extra_field': fields.StringField(nullable=True)
       }

Then, to create a payload, you would do something like the following. Note
that if you choose to define a schema in the SCHEMA class variable, you must
populate the schema by calling `populate_schema(example_obj=my_example_obj)`
before emitting the notification is allowed::

    my_example_obj = ExampleObject(id=1,
                                   a_useful_field='important',
                                   not_useful_field='blah')

    # an_extra_field is optional since it's not a part of the SCHEMA and is a
    # nullable field in the class fields
    my_notif_payload = ExampleNotifPayload(an_extra_field='hello')
    # populate the schema with the ExampleObject fields
    my_notif_payload.populate_schema(example_obj=my_example_obj)

You then create the notification with the oslo required fields (event_type,
publisher_id, and priority, all sender fields needed by oslo that are defined
in the Ironic notification base classes) and emit it::

    notif = ExampleNotification(
        event_type=notification.EventType(object='example_obj',
            action='do_something', phase='start'),
        publisher=notification.NotificationPublisher(service='conductor',
                                                     host='cond-hostname01'),
        priority=fields.NotificationPriority.DEBUG,
        payload=my_notif_payload)
    notif.emit(context)

This will send the following notification over the message bus::

   {
       "priority": "debug",
       "payload":{
           "ironic_object.namespace":"ironic",
           "ironic_object.name":"ExampleNotifPayload",
           "ironic_object.version":"1.0",
           "ironic_object.data":{
                "a_useful_field":"important",
                "an_extra_field":"hello"
           }
       },
       "event_type":"baremetal.example_obj.do_something.start",
       "publisher_id":"conductor:cond-hostname01"
    }

.. [1] http://docs.openstack.org/developer/oslo.messaging/notifier.html
.. [2] http://docs.openstack.org/developer/oslo.versionedobjects
.. [3] https://wiki.openstack.org/wiki/LoggingStandards#Log_level_definitions
